/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sn.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientVoiceToText {

  public interface Iface {

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException;

    public boolean onClientConnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException;

    public boolean onClientDisconnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException;

    public boolean onClientMoved(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick) throws org.apache.thrift.TException;

    public boolean onChannelCreated(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException;

    public boolean onChannelEdited(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException;

    public boolean onChannelDeleted(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.info_call> resultHandler) throws org.apache.thrift.TException;

    public void onClientConnected(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onClientConnected_call> resultHandler) throws org.apache.thrift.TException;

    public void onClientDisconnected(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onClientDisconnected_call> resultHandler) throws org.apache.thrift.TException;

    public void onClientMoved(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onClientMoved_call> resultHandler) throws org.apache.thrift.TException;

    public void onChannelCreated(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onChannelCreated_call> resultHandler) throws org.apache.thrift.TException;

    public void onChannelEdited(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onChannelEdited_call> resultHandler) throws org.apache.thrift.TException;

    public void onChannelDeleted(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.onChannelDeleted_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException
    {
      send_info(server_id, max_clients, DNS, port_TS, port_Thrift);
      recv_info();
    }

    public void send_info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException
    {
      info_args args = new info_args();
      args.setServer_id(server_id);
      args.setMax_clients(max_clients);
      args.setDNS(DNS);
      args.setPort_TS(port_TS);
      args.setPort_Thrift(port_Thrift);
      sendBase("info", args);
    }

    public void recv_info() throws org.apache.thrift.TException
    {
      info_result result = new info_result();
      receiveBase(result, "info");
      return;
    }

    public boolean onClientConnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onClientConnected(server_id, clientID, channelID, clientNick);
      return recv_onClientConnected();
    }

    public void send_onClientConnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      onClientConnected_args args = new onClientConnected_args();
      args.setServer_id(server_id);
      args.setClientID(clientID);
      args.setChannelID(channelID);
      args.setClientNick(clientNick);
      sendBase("onClientConnected", args);
    }

    public boolean recv_onClientConnected() throws org.apache.thrift.TException
    {
      onClientConnected_result result = new onClientConnected_result();
      receiveBase(result, "onClientConnected");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onClientConnected failed: unknown result");
    }

    public boolean onClientDisconnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onClientDisconnected(server_id, clientID, channelID, clientNick);
      return recv_onClientDisconnected();
    }

    public void send_onClientDisconnected(int server_id, int clientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      onClientDisconnected_args args = new onClientDisconnected_args();
      args.setServer_id(server_id);
      args.setClientID(clientID);
      args.setChannelID(channelID);
      args.setClientNick(clientNick);
      sendBase("onClientDisconnected", args);
    }

    public boolean recv_onClientDisconnected() throws org.apache.thrift.TException
    {
      onClientDisconnected_result result = new onClientDisconnected_result();
      receiveBase(result, "onClientDisconnected");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onClientDisconnected failed: unknown result");
    }

    public boolean onClientMoved(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onClientMoved(server_id, clientID, oldChannelID, newChannelID, clientNick);
      return recv_onClientMoved();
    }

    public void send_onClientMoved(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick) throws org.apache.thrift.TException
    {
      onClientMoved_args args = new onClientMoved_args();
      args.setServer_id(server_id);
      args.setClientID(clientID);
      args.setOldChannelID(oldChannelID);
      args.setNewChannelID(newChannelID);
      args.setClientNick(clientNick);
      sendBase("onClientMoved", args);
    }

    public boolean recv_onClientMoved() throws org.apache.thrift.TException
    {
      onClientMoved_result result = new onClientMoved_result();
      receiveBase(result, "onClientMoved");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onClientMoved failed: unknown result");
    }

    public boolean onChannelCreated(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onChannelCreated(server_id, invokerClientID, channelID, clientNick);
      return recv_onChannelCreated();
    }

    public void send_onChannelCreated(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      onChannelCreated_args args = new onChannelCreated_args();
      args.setServer_id(server_id);
      args.setInvokerClientID(invokerClientID);
      args.setChannelID(channelID);
      args.setClientNick(clientNick);
      sendBase("onChannelCreated", args);
    }

    public boolean recv_onChannelCreated() throws org.apache.thrift.TException
    {
      onChannelCreated_result result = new onChannelCreated_result();
      receiveBase(result, "onChannelCreated");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onChannelCreated failed: unknown result");
    }

    public boolean onChannelEdited(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onChannelEdited(server_id, invokerClientID, channelID, clientNick);
      return recv_onChannelEdited();
    }

    public void send_onChannelEdited(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      onChannelEdited_args args = new onChannelEdited_args();
      args.setServer_id(server_id);
      args.setInvokerClientID(invokerClientID);
      args.setChannelID(channelID);
      args.setClientNick(clientNick);
      sendBase("onChannelEdited", args);
    }

    public boolean recv_onChannelEdited() throws org.apache.thrift.TException
    {
      onChannelEdited_result result = new onChannelEdited_result();
      receiveBase(result, "onChannelEdited");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onChannelEdited failed: unknown result");
    }

    public boolean onChannelDeleted(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      send_onChannelDeleted(server_id, invokerClientID, channelID, clientNick);
      return recv_onChannelDeleted();
    }

    public void send_onChannelDeleted(int server_id, int invokerClientID, int channelID, String clientNick) throws org.apache.thrift.TException
    {
      onChannelDeleted_args args = new onChannelDeleted_args();
      args.setServer_id(server_id);
      args.setInvokerClientID(invokerClientID);
      args.setChannelID(channelID);
      args.setClientNick(clientNick);
      sendBase("onChannelDeleted", args);
    }

    public boolean recv_onChannelDeleted() throws org.apache.thrift.TException
    {
      onChannelDeleted_result result = new onChannelDeleted_result();
      receiveBase(result, "onChannelDeleted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "onChannelDeleted failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<info_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      info_call method_call = new info_call(server_id, max_clients, DNS, port_TS, port_Thrift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int max_clients;
      private String DNS;
      private int port_TS;
      private int port_Thrift;
      public info_call(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<info_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.max_clients = max_clients;
        this.DNS = DNS;
        this.port_TS = port_TS;
        this.port_Thrift = port_Thrift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        info_args args = new info_args();
        args.setServer_id(server_id);
        args.setMax_clients(max_clients);
        args.setDNS(DNS);
        args.setPort_TS(port_TS);
        args.setPort_Thrift(port_Thrift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_info();
      }
    }

    public void onClientConnected(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientConnected_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onClientConnected_call method_call = new onClientConnected_call(server_id, clientID, channelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onClientConnected_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int clientID;
      private int channelID;
      private String clientNick;
      public onClientConnected_call(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientConnected_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.clientID = clientID;
        this.channelID = channelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onClientConnected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onClientConnected_args args = new onClientConnected_args();
        args.setServer_id(server_id);
        args.setClientID(clientID);
        args.setChannelID(channelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onClientConnected();
      }
    }

    public void onClientDisconnected(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientDisconnected_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onClientDisconnected_call method_call = new onClientDisconnected_call(server_id, clientID, channelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onClientDisconnected_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int clientID;
      private int channelID;
      private String clientNick;
      public onClientDisconnected_call(int server_id, int clientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientDisconnected_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.clientID = clientID;
        this.channelID = channelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onClientDisconnected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onClientDisconnected_args args = new onClientDisconnected_args();
        args.setServer_id(server_id);
        args.setClientID(clientID);
        args.setChannelID(channelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onClientDisconnected();
      }
    }

    public void onClientMoved(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientMoved_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onClientMoved_call method_call = new onClientMoved_call(server_id, clientID, oldChannelID, newChannelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onClientMoved_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int clientID;
      private int oldChannelID;
      private int newChannelID;
      private String clientNick;
      public onClientMoved_call(int server_id, int clientID, int oldChannelID, int newChannelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onClientMoved_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.clientID = clientID;
        this.oldChannelID = oldChannelID;
        this.newChannelID = newChannelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onClientMoved", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onClientMoved_args args = new onClientMoved_args();
        args.setServer_id(server_id);
        args.setClientID(clientID);
        args.setOldChannelID(oldChannelID);
        args.setNewChannelID(newChannelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onClientMoved();
      }
    }

    public void onChannelCreated(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelCreated_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onChannelCreated_call method_call = new onChannelCreated_call(server_id, invokerClientID, channelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onChannelCreated_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int invokerClientID;
      private int channelID;
      private String clientNick;
      public onChannelCreated_call(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelCreated_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.invokerClientID = invokerClientID;
        this.channelID = channelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onChannelCreated", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onChannelCreated_args args = new onChannelCreated_args();
        args.setServer_id(server_id);
        args.setInvokerClientID(invokerClientID);
        args.setChannelID(channelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onChannelCreated();
      }
    }

    public void onChannelEdited(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelEdited_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onChannelEdited_call method_call = new onChannelEdited_call(server_id, invokerClientID, channelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onChannelEdited_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int invokerClientID;
      private int channelID;
      private String clientNick;
      public onChannelEdited_call(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelEdited_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.invokerClientID = invokerClientID;
        this.channelID = channelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onChannelEdited", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onChannelEdited_args args = new onChannelEdited_args();
        args.setServer_id(server_id);
        args.setInvokerClientID(invokerClientID);
        args.setChannelID(channelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onChannelEdited();
      }
    }

    public void onChannelDeleted(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelDeleted_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onChannelDeleted_call method_call = new onChannelDeleted_call(server_id, invokerClientID, channelID, clientNick, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onChannelDeleted_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int invokerClientID;
      private int channelID;
      private String clientNick;
      public onChannelDeleted_call(int server_id, int invokerClientID, int channelID, String clientNick, org.apache.thrift.async.AsyncMethodCallback<onChannelDeleted_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.invokerClientID = invokerClientID;
        this.channelID = channelID;
        this.clientNick = clientNick;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onChannelDeleted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onChannelDeleted_args args = new onChannelDeleted_args();
        args.setServer_id(server_id);
        args.setInvokerClientID(invokerClientID);
        args.setChannelID(channelID);
        args.setClientNick(clientNick);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_onChannelDeleted();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("info", new info());
      processMap.put("onClientConnected", new onClientConnected());
      processMap.put("onClientDisconnected", new onClientDisconnected());
      processMap.put("onClientMoved", new onClientMoved());
      processMap.put("onChannelCreated", new onChannelCreated());
      processMap.put("onChannelEdited", new onChannelEdited());
      processMap.put("onChannelDeleted", new onChannelDeleted());
      return processMap;
    }

    public static class info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, info_args> {
      public info() {
        super("info");
      }

      public info_args getEmptyArgsInstance() {
        return new info_args();
      }

      public info_result getResult(I iface, info_args args) throws org.apache.thrift.TException {
        info_result result = new info_result();
        iface.info(args.server_id, args.max_clients, args.DNS, args.port_TS, args.port_Thrift);
        return result;
      }
    }

    public static class onClientConnected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onClientConnected_args> {
      public onClientConnected() {
        super("onClientConnected");
      }

      public onClientConnected_args getEmptyArgsInstance() {
        return new onClientConnected_args();
      }

      public onClientConnected_result getResult(I iface, onClientConnected_args args) throws org.apache.thrift.TException {
        onClientConnected_result result = new onClientConnected_result();
        result.success = iface.onClientConnected(args.server_id, args.clientID, args.channelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class onClientDisconnected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onClientDisconnected_args> {
      public onClientDisconnected() {
        super("onClientDisconnected");
      }

      public onClientDisconnected_args getEmptyArgsInstance() {
        return new onClientDisconnected_args();
      }

      public onClientDisconnected_result getResult(I iface, onClientDisconnected_args args) throws org.apache.thrift.TException {
        onClientDisconnected_result result = new onClientDisconnected_result();
        result.success = iface.onClientDisconnected(args.server_id, args.clientID, args.channelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class onClientMoved<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onClientMoved_args> {
      public onClientMoved() {
        super("onClientMoved");
      }

      public onClientMoved_args getEmptyArgsInstance() {
        return new onClientMoved_args();
      }

      public onClientMoved_result getResult(I iface, onClientMoved_args args) throws org.apache.thrift.TException {
        onClientMoved_result result = new onClientMoved_result();
        result.success = iface.onClientMoved(args.server_id, args.clientID, args.oldChannelID, args.newChannelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class onChannelCreated<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onChannelCreated_args> {
      public onChannelCreated() {
        super("onChannelCreated");
      }

      public onChannelCreated_args getEmptyArgsInstance() {
        return new onChannelCreated_args();
      }

      public onChannelCreated_result getResult(I iface, onChannelCreated_args args) throws org.apache.thrift.TException {
        onChannelCreated_result result = new onChannelCreated_result();
        result.success = iface.onChannelCreated(args.server_id, args.invokerClientID, args.channelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class onChannelEdited<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onChannelEdited_args> {
      public onChannelEdited() {
        super("onChannelEdited");
      }

      public onChannelEdited_args getEmptyArgsInstance() {
        return new onChannelEdited_args();
      }

      public onChannelEdited_result getResult(I iface, onChannelEdited_args args) throws org.apache.thrift.TException {
        onChannelEdited_result result = new onChannelEdited_result();
        result.success = iface.onChannelEdited(args.server_id, args.invokerClientID, args.channelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class onChannelDeleted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onChannelDeleted_args> {
      public onChannelDeleted() {
        super("onChannelDeleted");
      }

      public onChannelDeleted_args getEmptyArgsInstance() {
        return new onChannelDeleted_args();
      }

      public onChannelDeleted_result getResult(I iface, onChannelDeleted_args args) throws org.apache.thrift.TException {
        onChannelDeleted_result result = new onChannelDeleted_result();
        result.success = iface.onChannelDeleted(args.server_id, args.invokerClientID, args.channelID, args.clientNick);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class info_args implements org.apache.thrift.TBase<info_args, info_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("info_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_CLIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_clients", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DNS_FIELD_DESC = new org.apache.thrift.protocol.TField("DNS", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PORT__TS_FIELD_DESC = new org.apache.thrift.protocol.TField("port_TS", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PORT__THRIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("port_Thrift", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new info_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int max_clients; // required
    public String DNS; // required
    public int port_TS; // required
    public int port_Thrift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      MAX_CLIENTS((short)2, "max_clients"),
      DNS((short)3, "DNS"),
      PORT__TS((short)4, "port_TS"),
      PORT__THRIFT((short)5, "port_Thrift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // MAX_CLIENTS
            return MAX_CLIENTS;
          case 3: // DNS
            return DNS;
          case 4: // PORT__TS
            return PORT__TS;
          case 5: // PORT__THRIFT
            return PORT__THRIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __MAX_CLIENTS_ISSET_ID = 1;
    private static final int __PORT_TS_ISSET_ID = 2;
    private static final int __PORT_THRIFT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_CLIENTS, new org.apache.thrift.meta_data.FieldMetaData("max_clients", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DNS, new org.apache.thrift.meta_data.FieldMetaData("DNS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT__TS, new org.apache.thrift.meta_data.FieldMetaData("port_TS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PORT__THRIFT, new org.apache.thrift.meta_data.FieldMetaData("port_Thrift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(info_args.class, metaDataMap);
    }

    public info_args() {
    }

    public info_args(
      int server_id,
      int max_clients,
      String DNS,
      int port_TS,
      int port_Thrift)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.max_clients = max_clients;
      setMax_clientsIsSet(true);
      this.DNS = DNS;
      this.port_TS = port_TS;
      setPort_TSIsSet(true);
      this.port_Thrift = port_Thrift;
      setPort_ThriftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public info_args(info_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.max_clients = other.max_clients;
      if (other.isSetDNS()) {
        this.DNS = other.DNS;
      }
      this.port_TS = other.port_TS;
      this.port_Thrift = other.port_Thrift;
    }

    public info_args deepCopy() {
      return new info_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setMax_clientsIsSet(false);
      this.max_clients = 0;
      this.DNS = null;
      setPort_TSIsSet(false);
      this.port_TS = 0;
      setPort_ThriftIsSet(false);
      this.port_Thrift = 0;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public info_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getMax_clients() {
      return this.max_clients;
    }

    public info_args setMax_clients(int max_clients) {
      this.max_clients = max_clients;
      setMax_clientsIsSet(true);
      return this;
    }

    public void unsetMax_clients() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID);
    }

    /** Returns true if field max_clients is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_clients() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID);
    }

    public void setMax_clientsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID, value);
    }

    public String getDNS() {
      return this.DNS;
    }

    public info_args setDNS(String DNS) {
      this.DNS = DNS;
      return this;
    }

    public void unsetDNS() {
      this.DNS = null;
    }

    /** Returns true if field DNS is set (has been assigned a value) and false otherwise */
    public boolean isSetDNS() {
      return this.DNS != null;
    }

    public void setDNSIsSet(boolean value) {
      if (!value) {
        this.DNS = null;
      }
    }

    public int getPort_TS() {
      return this.port_TS;
    }

    public info_args setPort_TS(int port_TS) {
      this.port_TS = port_TS;
      setPort_TSIsSet(true);
      return this;
    }

    public void unsetPort_TS() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_TS_ISSET_ID);
    }

    /** Returns true if field port_TS is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_TS() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_TS_ISSET_ID);
    }

    public void setPort_TSIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_TS_ISSET_ID, value);
    }

    public int getPort_Thrift() {
      return this.port_Thrift;
    }

    public info_args setPort_Thrift(int port_Thrift) {
      this.port_Thrift = port_Thrift;
      setPort_ThriftIsSet(true);
      return this;
    }

    public void unsetPort_Thrift() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID);
    }

    /** Returns true if field port_Thrift is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_Thrift() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID);
    }

    public void setPort_ThriftIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case MAX_CLIENTS:
        if (value == null) {
          unsetMax_clients();
        } else {
          setMax_clients((Integer)value);
        }
        break;

      case DNS:
        if (value == null) {
          unsetDNS();
        } else {
          setDNS((String)value);
        }
        break;

      case PORT__TS:
        if (value == null) {
          unsetPort_TS();
        } else {
          setPort_TS((Integer)value);
        }
        break;

      case PORT__THRIFT:
        if (value == null) {
          unsetPort_Thrift();
        } else {
          setPort_Thrift((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case MAX_CLIENTS:
        return Integer.valueOf(getMax_clients());

      case DNS:
        return getDNS();

      case PORT__TS:
        return Integer.valueOf(getPort_TS());

      case PORT__THRIFT:
        return Integer.valueOf(getPort_Thrift());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case MAX_CLIENTS:
        return isSetMax_clients();
      case DNS:
        return isSetDNS();
      case PORT__TS:
        return isSetPort_TS();
      case PORT__THRIFT:
        return isSetPort_Thrift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof info_args)
        return this.equals((info_args)that);
      return false;
    }

    public boolean equals(info_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_max_clients = true;
      boolean that_present_max_clients = true;
      if (this_present_max_clients || that_present_max_clients) {
        if (!(this_present_max_clients && that_present_max_clients))
          return false;
        if (this.max_clients != that.max_clients)
          return false;
      }

      boolean this_present_DNS = true && this.isSetDNS();
      boolean that_present_DNS = true && that.isSetDNS();
      if (this_present_DNS || that_present_DNS) {
        if (!(this_present_DNS && that_present_DNS))
          return false;
        if (!this.DNS.equals(that.DNS))
          return false;
      }

      boolean this_present_port_TS = true;
      boolean that_present_port_TS = true;
      if (this_present_port_TS || that_present_port_TS) {
        if (!(this_present_port_TS && that_present_port_TS))
          return false;
        if (this.port_TS != that.port_TS)
          return false;
      }

      boolean this_present_port_Thrift = true;
      boolean that_present_port_Thrift = true;
      if (this_present_port_Thrift || that_present_port_Thrift) {
        if (!(this_present_port_Thrift && that_present_port_Thrift))
          return false;
        if (this.port_Thrift != that.port_Thrift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      info_args typedOther = (info_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_clients()).compareTo(typedOther.isSetMax_clients());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_clients()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_clients, typedOther.max_clients);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDNS()).compareTo(typedOther.isSetDNS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDNS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DNS, typedOther.DNS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_TS()).compareTo(typedOther.isSetPort_TS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_TS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_TS, typedOther.port_TS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_Thrift()).compareTo(typedOther.isSetPort_Thrift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_Thrift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_Thrift, typedOther.port_Thrift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("info_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_clients:");
      sb.append(this.max_clients);
      first = false;
      if (!first) sb.append(", ");
      sb.append("DNS:");
      if (this.DNS == null) {
        sb.append("null");
      } else {
        sb.append(this.DNS);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_TS:");
      sb.append(this.port_TS);
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_Thrift:");
      sb.append(this.port_Thrift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class info_argsStandardSchemeFactory implements SchemeFactory {
      public info_argsStandardScheme getScheme() {
        return new info_argsStandardScheme();
      }
    }

    private static class info_argsStandardScheme extends StandardScheme<info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX_CLIENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max_clients = iprot.readI32();
                struct.setMax_clientsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DNS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DNS = iprot.readString();
                struct.setDNSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PORT__TS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_TS = iprot.readI32();
                struct.setPort_TSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT__THRIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_Thrift = iprot.readI32();
                struct.setPort_ThriftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_CLIENTS_FIELD_DESC);
        oprot.writeI32(struct.max_clients);
        oprot.writeFieldEnd();
        if (struct.DNS != null) {
          oprot.writeFieldBegin(DNS_FIELD_DESC);
          oprot.writeString(struct.DNS);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT__TS_FIELD_DESC);
        oprot.writeI32(struct.port_TS);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PORT__THRIFT_FIELD_DESC);
        oprot.writeI32(struct.port_Thrift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class info_argsTupleSchemeFactory implements SchemeFactory {
      public info_argsTupleScheme getScheme() {
        return new info_argsTupleScheme();
      }
    }

    private static class info_argsTupleScheme extends TupleScheme<info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetMax_clients()) {
          optionals.set(1);
        }
        if (struct.isSetDNS()) {
          optionals.set(2);
        }
        if (struct.isSetPort_TS()) {
          optionals.set(3);
        }
        if (struct.isSetPort_Thrift()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetMax_clients()) {
          oprot.writeI32(struct.max_clients);
        }
        if (struct.isSetDNS()) {
          oprot.writeString(struct.DNS);
        }
        if (struct.isSetPort_TS()) {
          oprot.writeI32(struct.port_TS);
        }
        if (struct.isSetPort_Thrift()) {
          oprot.writeI32(struct.port_Thrift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max_clients = iprot.readI32();
          struct.setMax_clientsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.DNS = iprot.readString();
          struct.setDNSIsSet(true);
        }
        if (incoming.get(3)) {
          struct.port_TS = iprot.readI32();
          struct.setPort_TSIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port_Thrift = iprot.readI32();
          struct.setPort_ThriftIsSet(true);
        }
      }
    }

  }

  public static class info_result implements org.apache.thrift.TBase<info_result, info_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("info_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new info_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(info_result.class, metaDataMap);
    }

    public info_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public info_result(info_result other) {
    }

    public info_result deepCopy() {
      return new info_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof info_result)
        return this.equals((info_result)that);
      return false;
    }

    public boolean equals(info_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      info_result typedOther = (info_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("info_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class info_resultStandardSchemeFactory implements SchemeFactory {
      public info_resultStandardScheme getScheme() {
        return new info_resultStandardScheme();
      }
    }

    private static class info_resultStandardScheme extends StandardScheme<info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class info_resultTupleSchemeFactory implements SchemeFactory {
      public info_resultTupleScheme getScheme() {
        return new info_resultTupleScheme();
      }
    }

    private static class info_resultTupleScheme extends TupleScheme<info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onClientConnected_args implements org.apache.thrift.TBase<onClientConnected_args, onClientConnected_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientConnected_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientConnected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientConnected_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int clientID; // required
    public int channelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      CLIENT_ID((short)2, "clientID"),
      CHANNEL_ID((short)3, "channelID"),
      CLIENT_NICK((short)4, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __CLIENTID_ISSET_ID = 1;
    private static final int __CHANNELID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientConnected_args.class, metaDataMap);
    }

    public onClientConnected_args() {
    }

    public onClientConnected_args(
      int server_id,
      int clientID,
      int channelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.clientID = clientID;
      setClientIDIsSet(true);
      this.channelID = channelID;
      setChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientConnected_args(onClientConnected_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.clientID = other.clientID;
      this.channelID = other.channelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onClientConnected_args deepCopy() {
      return new onClientConnected_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setClientIDIsSet(false);
      this.clientID = 0;
      setChannelIDIsSet(false);
      this.channelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onClientConnected_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getClientID() {
      return this.clientID;
    }

    public onClientConnected_args setClientID(int clientID) {
      this.clientID = clientID;
      setClientIDIsSet(true);
      return this;
    }

    public void unsetClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
    public boolean isSetClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    public void setClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
    }

    public int getChannelID() {
      return this.channelID;
    }

    public onClientConnected_args setChannelID(int channelID) {
      this.channelID = channelID;
      setChannelIDIsSet(true);
      return this;
    }

    public void unsetChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    public void setChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onClientConnected_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientID();
        } else {
          setClientID((Integer)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelID();
        } else {
          setChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case CLIENT_ID:
        return Integer.valueOf(getClientID());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case CLIENT_ID:
        return isSetClientID();
      case CHANNEL_ID:
        return isSetChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientConnected_args)
        return this.equals((onClientConnected_args)that);
      return false;
    }

    public boolean equals(onClientConnected_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_clientID = true;
      boolean that_present_clientID = true;
      if (this_present_clientID || that_present_clientID) {
        if (!(this_present_clientID && that_present_clientID))
          return false;
        if (this.clientID != that.clientID)
          return false;
      }

      boolean this_present_channelID = true;
      boolean that_present_channelID = true;
      if (this_present_channelID || that_present_channelID) {
        if (!(this_present_channelID && that_present_channelID))
          return false;
        if (this.channelID != that.channelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientConnected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientConnected_args typedOther = (onClientConnected_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientID()).compareTo(typedOther.isSetClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, typedOther.clientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientConnected_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientID:");
      sb.append(this.clientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelID:");
      sb.append(this.channelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientConnected_argsStandardSchemeFactory implements SchemeFactory {
      public onClientConnected_argsStandardScheme getScheme() {
        return new onClientConnected_argsStandardScheme();
      }
    }

    private static class onClientConnected_argsStandardScheme extends StandardScheme<onClientConnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientConnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clientID = iprot.readI32();
                struct.setClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelID = iprot.readI32();
                struct.setChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientConnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.clientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientConnected_argsTupleSchemeFactory implements SchemeFactory {
      public onClientConnected_argsTupleScheme getScheme() {
        return new onClientConnected_argsTupleScheme();
      }
    }

    private static class onClientConnected_argsTupleScheme extends TupleScheme<onClientConnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetClientID()) {
          optionals.set(1);
        }
        if (struct.isSetChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetClientNick()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetClientID()) {
          oprot.writeI32(struct.clientID);
        }
        if (struct.isSetChannelID()) {
          oprot.writeI32(struct.channelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientID = iprot.readI32();
          struct.setClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelID = iprot.readI32();
          struct.setChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onClientConnected_result implements org.apache.thrift.TBase<onClientConnected_result, onClientConnected_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientConnected_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientConnected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientConnected_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientConnected_result.class, metaDataMap);
    }

    public onClientConnected_result() {
    }

    public onClientConnected_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientConnected_result(onClientConnected_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onClientConnected_result deepCopy() {
      return new onClientConnected_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onClientConnected_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientConnected_result)
        return this.equals((onClientConnected_result)that);
      return false;
    }

    public boolean equals(onClientConnected_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientConnected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientConnected_result typedOther = (onClientConnected_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientConnected_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientConnected_resultStandardSchemeFactory implements SchemeFactory {
      public onClientConnected_resultStandardScheme getScheme() {
        return new onClientConnected_resultStandardScheme();
      }
    }

    private static class onClientConnected_resultStandardScheme extends StandardScheme<onClientConnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientConnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientConnected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientConnected_resultTupleSchemeFactory implements SchemeFactory {
      public onClientConnected_resultTupleScheme getScheme() {
        return new onClientConnected_resultTupleScheme();
      }
    }

    private static class onClientConnected_resultTupleScheme extends TupleScheme<onClientConnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onClientDisconnected_args implements org.apache.thrift.TBase<onClientDisconnected_args, onClientDisconnected_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientDisconnected_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientDisconnected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientDisconnected_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int clientID; // required
    public int channelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      CLIENT_ID((short)2, "clientID"),
      CHANNEL_ID((short)3, "channelID"),
      CLIENT_NICK((short)4, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __CLIENTID_ISSET_ID = 1;
    private static final int __CHANNELID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientDisconnected_args.class, metaDataMap);
    }

    public onClientDisconnected_args() {
    }

    public onClientDisconnected_args(
      int server_id,
      int clientID,
      int channelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.clientID = clientID;
      setClientIDIsSet(true);
      this.channelID = channelID;
      setChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientDisconnected_args(onClientDisconnected_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.clientID = other.clientID;
      this.channelID = other.channelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onClientDisconnected_args deepCopy() {
      return new onClientDisconnected_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setClientIDIsSet(false);
      this.clientID = 0;
      setChannelIDIsSet(false);
      this.channelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onClientDisconnected_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getClientID() {
      return this.clientID;
    }

    public onClientDisconnected_args setClientID(int clientID) {
      this.clientID = clientID;
      setClientIDIsSet(true);
      return this;
    }

    public void unsetClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
    public boolean isSetClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    public void setClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
    }

    public int getChannelID() {
      return this.channelID;
    }

    public onClientDisconnected_args setChannelID(int channelID) {
      this.channelID = channelID;
      setChannelIDIsSet(true);
      return this;
    }

    public void unsetChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    public void setChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onClientDisconnected_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientID();
        } else {
          setClientID((Integer)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelID();
        } else {
          setChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case CLIENT_ID:
        return Integer.valueOf(getClientID());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case CLIENT_ID:
        return isSetClientID();
      case CHANNEL_ID:
        return isSetChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientDisconnected_args)
        return this.equals((onClientDisconnected_args)that);
      return false;
    }

    public boolean equals(onClientDisconnected_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_clientID = true;
      boolean that_present_clientID = true;
      if (this_present_clientID || that_present_clientID) {
        if (!(this_present_clientID && that_present_clientID))
          return false;
        if (this.clientID != that.clientID)
          return false;
      }

      boolean this_present_channelID = true;
      boolean that_present_channelID = true;
      if (this_present_channelID || that_present_channelID) {
        if (!(this_present_channelID && that_present_channelID))
          return false;
        if (this.channelID != that.channelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientDisconnected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientDisconnected_args typedOther = (onClientDisconnected_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientID()).compareTo(typedOther.isSetClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, typedOther.clientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientDisconnected_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientID:");
      sb.append(this.clientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelID:");
      sb.append(this.channelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientDisconnected_argsStandardSchemeFactory implements SchemeFactory {
      public onClientDisconnected_argsStandardScheme getScheme() {
        return new onClientDisconnected_argsStandardScheme();
      }
    }

    private static class onClientDisconnected_argsStandardScheme extends StandardScheme<onClientDisconnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientDisconnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clientID = iprot.readI32();
                struct.setClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelID = iprot.readI32();
                struct.setChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientDisconnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.clientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientDisconnected_argsTupleSchemeFactory implements SchemeFactory {
      public onClientDisconnected_argsTupleScheme getScheme() {
        return new onClientDisconnected_argsTupleScheme();
      }
    }

    private static class onClientDisconnected_argsTupleScheme extends TupleScheme<onClientDisconnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientDisconnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetClientID()) {
          optionals.set(1);
        }
        if (struct.isSetChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetClientNick()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetClientID()) {
          oprot.writeI32(struct.clientID);
        }
        if (struct.isSetChannelID()) {
          oprot.writeI32(struct.channelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientDisconnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientID = iprot.readI32();
          struct.setClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelID = iprot.readI32();
          struct.setChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onClientDisconnected_result implements org.apache.thrift.TBase<onClientDisconnected_result, onClientDisconnected_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientDisconnected_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientDisconnected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientDisconnected_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientDisconnected_result.class, metaDataMap);
    }

    public onClientDisconnected_result() {
    }

    public onClientDisconnected_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientDisconnected_result(onClientDisconnected_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onClientDisconnected_result deepCopy() {
      return new onClientDisconnected_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onClientDisconnected_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientDisconnected_result)
        return this.equals((onClientDisconnected_result)that);
      return false;
    }

    public boolean equals(onClientDisconnected_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientDisconnected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientDisconnected_result typedOther = (onClientDisconnected_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientDisconnected_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientDisconnected_resultStandardSchemeFactory implements SchemeFactory {
      public onClientDisconnected_resultStandardScheme getScheme() {
        return new onClientDisconnected_resultStandardScheme();
      }
    }

    private static class onClientDisconnected_resultStandardScheme extends StandardScheme<onClientDisconnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientDisconnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientDisconnected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientDisconnected_resultTupleSchemeFactory implements SchemeFactory {
      public onClientDisconnected_resultTupleScheme getScheme() {
        return new onClientDisconnected_resultTupleScheme();
      }
    }

    private static class onClientDisconnected_resultTupleScheme extends TupleScheme<onClientDisconnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientDisconnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientDisconnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onClientMoved_args implements org.apache.thrift.TBase<onClientMoved_args, onClientMoved_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientMoved_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldChannelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newChannelID", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientMoved_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientMoved_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int clientID; // required
    public int oldChannelID; // required
    public int newChannelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      CLIENT_ID((short)2, "clientID"),
      OLD_CHANNEL_ID((short)3, "oldChannelID"),
      NEW_CHANNEL_ID((short)4, "newChannelID"),
      CLIENT_NICK((short)5, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // OLD_CHANNEL_ID
            return OLD_CHANNEL_ID;
          case 4: // NEW_CHANNEL_ID
            return NEW_CHANNEL_ID;
          case 5: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __CLIENTID_ISSET_ID = 1;
    private static final int __OLDCHANNELID_ISSET_ID = 2;
    private static final int __NEWCHANNELID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OLD_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("oldChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEW_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("newChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientMoved_args.class, metaDataMap);
    }

    public onClientMoved_args() {
    }

    public onClientMoved_args(
      int server_id,
      int clientID,
      int oldChannelID,
      int newChannelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.clientID = clientID;
      setClientIDIsSet(true);
      this.oldChannelID = oldChannelID;
      setOldChannelIDIsSet(true);
      this.newChannelID = newChannelID;
      setNewChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientMoved_args(onClientMoved_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.clientID = other.clientID;
      this.oldChannelID = other.oldChannelID;
      this.newChannelID = other.newChannelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onClientMoved_args deepCopy() {
      return new onClientMoved_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setClientIDIsSet(false);
      this.clientID = 0;
      setOldChannelIDIsSet(false);
      this.oldChannelID = 0;
      setNewChannelIDIsSet(false);
      this.newChannelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onClientMoved_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getClientID() {
      return this.clientID;
    }

    public onClientMoved_args setClientID(int clientID) {
      this.clientID = clientID;
      setClientIDIsSet(true);
      return this;
    }

    public void unsetClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
    public boolean isSetClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    public void setClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
    }

    public int getOldChannelID() {
      return this.oldChannelID;
    }

    public onClientMoved_args setOldChannelID(int oldChannelID) {
      this.oldChannelID = oldChannelID;
      setOldChannelIDIsSet(true);
      return this;
    }

    public void unsetOldChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDCHANNELID_ISSET_ID);
    }

    /** Returns true if field oldChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetOldChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDCHANNELID_ISSET_ID);
    }

    public void setOldChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDCHANNELID_ISSET_ID, value);
    }

    public int getNewChannelID() {
      return this.newChannelID;
    }

    public onClientMoved_args setNewChannelID(int newChannelID) {
      this.newChannelID = newChannelID;
      setNewChannelIDIsSet(true);
      return this;
    }

    public void unsetNewChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWCHANNELID_ISSET_ID);
    }

    /** Returns true if field newChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetNewChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWCHANNELID_ISSET_ID);
    }

    public void setNewChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWCHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onClientMoved_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientID();
        } else {
          setClientID((Integer)value);
        }
        break;

      case OLD_CHANNEL_ID:
        if (value == null) {
          unsetOldChannelID();
        } else {
          setOldChannelID((Integer)value);
        }
        break;

      case NEW_CHANNEL_ID:
        if (value == null) {
          unsetNewChannelID();
        } else {
          setNewChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case CLIENT_ID:
        return Integer.valueOf(getClientID());

      case OLD_CHANNEL_ID:
        return Integer.valueOf(getOldChannelID());

      case NEW_CHANNEL_ID:
        return Integer.valueOf(getNewChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case CLIENT_ID:
        return isSetClientID();
      case OLD_CHANNEL_ID:
        return isSetOldChannelID();
      case NEW_CHANNEL_ID:
        return isSetNewChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientMoved_args)
        return this.equals((onClientMoved_args)that);
      return false;
    }

    public boolean equals(onClientMoved_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_clientID = true;
      boolean that_present_clientID = true;
      if (this_present_clientID || that_present_clientID) {
        if (!(this_present_clientID && that_present_clientID))
          return false;
        if (this.clientID != that.clientID)
          return false;
      }

      boolean this_present_oldChannelID = true;
      boolean that_present_oldChannelID = true;
      if (this_present_oldChannelID || that_present_oldChannelID) {
        if (!(this_present_oldChannelID && that_present_oldChannelID))
          return false;
        if (this.oldChannelID != that.oldChannelID)
          return false;
      }

      boolean this_present_newChannelID = true;
      boolean that_present_newChannelID = true;
      if (this_present_newChannelID || that_present_newChannelID) {
        if (!(this_present_newChannelID && that_present_newChannelID))
          return false;
        if (this.newChannelID != that.newChannelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientMoved_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientMoved_args typedOther = (onClientMoved_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientID()).compareTo(typedOther.isSetClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, typedOther.clientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldChannelID()).compareTo(typedOther.isSetOldChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldChannelID, typedOther.oldChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewChannelID()).compareTo(typedOther.isSetNewChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newChannelID, typedOther.newChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientMoved_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientID:");
      sb.append(this.clientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldChannelID:");
      sb.append(this.oldChannelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newChannelID:");
      sb.append(this.newChannelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientMoved_argsStandardSchemeFactory implements SchemeFactory {
      public onClientMoved_argsStandardScheme getScheme() {
        return new onClientMoved_argsStandardScheme();
      }
    }

    private static class onClientMoved_argsStandardScheme extends StandardScheme<onClientMoved_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientMoved_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clientID = iprot.readI32();
                struct.setClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldChannelID = iprot.readI32();
                struct.setOldChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newChannelID = iprot.readI32();
                struct.setNewChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientMoved_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.clientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OLD_CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.oldChannelID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEW_CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.newChannelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientMoved_argsTupleSchemeFactory implements SchemeFactory {
      public onClientMoved_argsTupleScheme getScheme() {
        return new onClientMoved_argsTupleScheme();
      }
    }

    private static class onClientMoved_argsTupleScheme extends TupleScheme<onClientMoved_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientMoved_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetClientID()) {
          optionals.set(1);
        }
        if (struct.isSetOldChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetNewChannelID()) {
          optionals.set(3);
        }
        if (struct.isSetClientNick()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetClientID()) {
          oprot.writeI32(struct.clientID);
        }
        if (struct.isSetOldChannelID()) {
          oprot.writeI32(struct.oldChannelID);
        }
        if (struct.isSetNewChannelID()) {
          oprot.writeI32(struct.newChannelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientMoved_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientID = iprot.readI32();
          struct.setClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.oldChannelID = iprot.readI32();
          struct.setOldChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.newChannelID = iprot.readI32();
          struct.setNewChannelIDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onClientMoved_result implements org.apache.thrift.TBase<onClientMoved_result, onClientMoved_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onClientMoved_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onClientMoved_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onClientMoved_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onClientMoved_result.class, metaDataMap);
    }

    public onClientMoved_result() {
    }

    public onClientMoved_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onClientMoved_result(onClientMoved_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onClientMoved_result deepCopy() {
      return new onClientMoved_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onClientMoved_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onClientMoved_result)
        return this.equals((onClientMoved_result)that);
      return false;
    }

    public boolean equals(onClientMoved_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onClientMoved_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onClientMoved_result typedOther = (onClientMoved_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onClientMoved_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onClientMoved_resultStandardSchemeFactory implements SchemeFactory {
      public onClientMoved_resultStandardScheme getScheme() {
        return new onClientMoved_resultStandardScheme();
      }
    }

    private static class onClientMoved_resultStandardScheme extends StandardScheme<onClientMoved_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onClientMoved_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onClientMoved_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onClientMoved_resultTupleSchemeFactory implements SchemeFactory {
      public onClientMoved_resultTupleScheme getScheme() {
        return new onClientMoved_resultTupleScheme();
      }
    }

    private static class onClientMoved_resultTupleScheme extends TupleScheme<onClientMoved_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onClientMoved_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onClientMoved_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onChannelCreated_args implements org.apache.thrift.TBase<onChannelCreated_args, onChannelCreated_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelCreated_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField INVOKER_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invokerClientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelCreated_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelCreated_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int invokerClientID; // required
    public int channelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      INVOKER_CLIENT_ID((short)2, "invokerClientID"),
      CHANNEL_ID((short)3, "channelID"),
      CLIENT_NICK((short)4, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // INVOKER_CLIENT_ID
            return INVOKER_CLIENT_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __INVOKERCLIENTID_ISSET_ID = 1;
    private static final int __CHANNELID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INVOKER_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("invokerClientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelCreated_args.class, metaDataMap);
    }

    public onChannelCreated_args() {
    }

    public onChannelCreated_args(
      int server_id,
      int invokerClientID,
      int channelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      this.channelID = channelID;
      setChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelCreated_args(onChannelCreated_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.invokerClientID = other.invokerClientID;
      this.channelID = other.channelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onChannelCreated_args deepCopy() {
      return new onChannelCreated_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setInvokerClientIDIsSet(false);
      this.invokerClientID = 0;
      setChannelIDIsSet(false);
      this.channelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onChannelCreated_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getInvokerClientID() {
      return this.invokerClientID;
    }

    public onChannelCreated_args setInvokerClientID(int invokerClientID) {
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      return this;
    }

    public void unsetInvokerClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    /** Returns true if field invokerClientID is set (has been assigned a value) and false otherwise */
    public boolean isSetInvokerClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    public void setInvokerClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID, value);
    }

    public int getChannelID() {
      return this.channelID;
    }

    public onChannelCreated_args setChannelID(int channelID) {
      this.channelID = channelID;
      setChannelIDIsSet(true);
      return this;
    }

    public void unsetChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    public void setChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onChannelCreated_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case INVOKER_CLIENT_ID:
        if (value == null) {
          unsetInvokerClientID();
        } else {
          setInvokerClientID((Integer)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelID();
        } else {
          setChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case INVOKER_CLIENT_ID:
        return Integer.valueOf(getInvokerClientID());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case INVOKER_CLIENT_ID:
        return isSetInvokerClientID();
      case CHANNEL_ID:
        return isSetChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelCreated_args)
        return this.equals((onChannelCreated_args)that);
      return false;
    }

    public boolean equals(onChannelCreated_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_invokerClientID = true;
      boolean that_present_invokerClientID = true;
      if (this_present_invokerClientID || that_present_invokerClientID) {
        if (!(this_present_invokerClientID && that_present_invokerClientID))
          return false;
        if (this.invokerClientID != that.invokerClientID)
          return false;
      }

      boolean this_present_channelID = true;
      boolean that_present_channelID = true;
      if (this_present_channelID || that_present_channelID) {
        if (!(this_present_channelID && that_present_channelID))
          return false;
        if (this.channelID != that.channelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelCreated_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelCreated_args typedOther = (onChannelCreated_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvokerClientID()).compareTo(typedOther.isSetInvokerClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvokerClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokerClientID, typedOther.invokerClientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelCreated_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invokerClientID:");
      sb.append(this.invokerClientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelID:");
      sb.append(this.channelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelCreated_argsStandardSchemeFactory implements SchemeFactory {
      public onChannelCreated_argsStandardScheme getScheme() {
        return new onChannelCreated_argsStandardScheme();
      }
    }

    private static class onChannelCreated_argsStandardScheme extends StandardScheme<onChannelCreated_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelCreated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOKER_CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.invokerClientID = iprot.readI32();
                struct.setInvokerClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelID = iprot.readI32();
                struct.setChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelCreated_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INVOKER_CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.invokerClientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelCreated_argsTupleSchemeFactory implements SchemeFactory {
      public onChannelCreated_argsTupleScheme getScheme() {
        return new onChannelCreated_argsTupleScheme();
      }
    }

    private static class onChannelCreated_argsTupleScheme extends TupleScheme<onChannelCreated_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelCreated_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetInvokerClientID()) {
          optionals.set(1);
        }
        if (struct.isSetChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetClientNick()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetInvokerClientID()) {
          oprot.writeI32(struct.invokerClientID);
        }
        if (struct.isSetChannelID()) {
          oprot.writeI32(struct.channelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelCreated_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invokerClientID = iprot.readI32();
          struct.setInvokerClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelID = iprot.readI32();
          struct.setChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onChannelCreated_result implements org.apache.thrift.TBase<onChannelCreated_result, onChannelCreated_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelCreated_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelCreated_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelCreated_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelCreated_result.class, metaDataMap);
    }

    public onChannelCreated_result() {
    }

    public onChannelCreated_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelCreated_result(onChannelCreated_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onChannelCreated_result deepCopy() {
      return new onChannelCreated_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onChannelCreated_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelCreated_result)
        return this.equals((onChannelCreated_result)that);
      return false;
    }

    public boolean equals(onChannelCreated_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelCreated_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelCreated_result typedOther = (onChannelCreated_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelCreated_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelCreated_resultStandardSchemeFactory implements SchemeFactory {
      public onChannelCreated_resultStandardScheme getScheme() {
        return new onChannelCreated_resultStandardScheme();
      }
    }

    private static class onChannelCreated_resultStandardScheme extends StandardScheme<onChannelCreated_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelCreated_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelCreated_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelCreated_resultTupleSchemeFactory implements SchemeFactory {
      public onChannelCreated_resultTupleScheme getScheme() {
        return new onChannelCreated_resultTupleScheme();
      }
    }

    private static class onChannelCreated_resultTupleScheme extends TupleScheme<onChannelCreated_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelCreated_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelCreated_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onChannelEdited_args implements org.apache.thrift.TBase<onChannelEdited_args, onChannelEdited_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelEdited_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField INVOKER_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invokerClientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelEdited_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelEdited_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int invokerClientID; // required
    public int channelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      INVOKER_CLIENT_ID((short)2, "invokerClientID"),
      CHANNEL_ID((short)3, "channelID"),
      CLIENT_NICK((short)4, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // INVOKER_CLIENT_ID
            return INVOKER_CLIENT_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __INVOKERCLIENTID_ISSET_ID = 1;
    private static final int __CHANNELID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INVOKER_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("invokerClientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelEdited_args.class, metaDataMap);
    }

    public onChannelEdited_args() {
    }

    public onChannelEdited_args(
      int server_id,
      int invokerClientID,
      int channelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      this.channelID = channelID;
      setChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelEdited_args(onChannelEdited_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.invokerClientID = other.invokerClientID;
      this.channelID = other.channelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onChannelEdited_args deepCopy() {
      return new onChannelEdited_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setInvokerClientIDIsSet(false);
      this.invokerClientID = 0;
      setChannelIDIsSet(false);
      this.channelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onChannelEdited_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getInvokerClientID() {
      return this.invokerClientID;
    }

    public onChannelEdited_args setInvokerClientID(int invokerClientID) {
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      return this;
    }

    public void unsetInvokerClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    /** Returns true if field invokerClientID is set (has been assigned a value) and false otherwise */
    public boolean isSetInvokerClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    public void setInvokerClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID, value);
    }

    public int getChannelID() {
      return this.channelID;
    }

    public onChannelEdited_args setChannelID(int channelID) {
      this.channelID = channelID;
      setChannelIDIsSet(true);
      return this;
    }

    public void unsetChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    public void setChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onChannelEdited_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case INVOKER_CLIENT_ID:
        if (value == null) {
          unsetInvokerClientID();
        } else {
          setInvokerClientID((Integer)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelID();
        } else {
          setChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case INVOKER_CLIENT_ID:
        return Integer.valueOf(getInvokerClientID());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case INVOKER_CLIENT_ID:
        return isSetInvokerClientID();
      case CHANNEL_ID:
        return isSetChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelEdited_args)
        return this.equals((onChannelEdited_args)that);
      return false;
    }

    public boolean equals(onChannelEdited_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_invokerClientID = true;
      boolean that_present_invokerClientID = true;
      if (this_present_invokerClientID || that_present_invokerClientID) {
        if (!(this_present_invokerClientID && that_present_invokerClientID))
          return false;
        if (this.invokerClientID != that.invokerClientID)
          return false;
      }

      boolean this_present_channelID = true;
      boolean that_present_channelID = true;
      if (this_present_channelID || that_present_channelID) {
        if (!(this_present_channelID && that_present_channelID))
          return false;
        if (this.channelID != that.channelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelEdited_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelEdited_args typedOther = (onChannelEdited_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvokerClientID()).compareTo(typedOther.isSetInvokerClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvokerClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokerClientID, typedOther.invokerClientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelEdited_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invokerClientID:");
      sb.append(this.invokerClientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelID:");
      sb.append(this.channelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelEdited_argsStandardSchemeFactory implements SchemeFactory {
      public onChannelEdited_argsStandardScheme getScheme() {
        return new onChannelEdited_argsStandardScheme();
      }
    }

    private static class onChannelEdited_argsStandardScheme extends StandardScheme<onChannelEdited_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelEdited_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOKER_CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.invokerClientID = iprot.readI32();
                struct.setInvokerClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelID = iprot.readI32();
                struct.setChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelEdited_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INVOKER_CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.invokerClientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelEdited_argsTupleSchemeFactory implements SchemeFactory {
      public onChannelEdited_argsTupleScheme getScheme() {
        return new onChannelEdited_argsTupleScheme();
      }
    }

    private static class onChannelEdited_argsTupleScheme extends TupleScheme<onChannelEdited_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelEdited_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetInvokerClientID()) {
          optionals.set(1);
        }
        if (struct.isSetChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetClientNick()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetInvokerClientID()) {
          oprot.writeI32(struct.invokerClientID);
        }
        if (struct.isSetChannelID()) {
          oprot.writeI32(struct.channelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelEdited_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invokerClientID = iprot.readI32();
          struct.setInvokerClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelID = iprot.readI32();
          struct.setChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onChannelEdited_result implements org.apache.thrift.TBase<onChannelEdited_result, onChannelEdited_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelEdited_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelEdited_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelEdited_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelEdited_result.class, metaDataMap);
    }

    public onChannelEdited_result() {
    }

    public onChannelEdited_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelEdited_result(onChannelEdited_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onChannelEdited_result deepCopy() {
      return new onChannelEdited_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onChannelEdited_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelEdited_result)
        return this.equals((onChannelEdited_result)that);
      return false;
    }

    public boolean equals(onChannelEdited_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelEdited_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelEdited_result typedOther = (onChannelEdited_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelEdited_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelEdited_resultStandardSchemeFactory implements SchemeFactory {
      public onChannelEdited_resultStandardScheme getScheme() {
        return new onChannelEdited_resultStandardScheme();
      }
    }

    private static class onChannelEdited_resultStandardScheme extends StandardScheme<onChannelEdited_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelEdited_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelEdited_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelEdited_resultTupleSchemeFactory implements SchemeFactory {
      public onChannelEdited_resultTupleScheme getScheme() {
        return new onChannelEdited_resultTupleScheme();
      }
    }

    private static class onChannelEdited_resultTupleScheme extends TupleScheme<onChannelEdited_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelEdited_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelEdited_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onChannelDeleted_args implements org.apache.thrift.TBase<onChannelDeleted_args, onChannelDeleted_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelDeleted_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField INVOKER_CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invokerClientID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelID", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_NICK_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNick", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelDeleted_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelDeleted_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int invokerClientID; // required
    public int channelID; // required
    public String clientNick; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      INVOKER_CLIENT_ID((short)2, "invokerClientID"),
      CHANNEL_ID((short)3, "channelID"),
      CLIENT_NICK((short)4, "clientNick");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // INVOKER_CLIENT_ID
            return INVOKER_CLIENT_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // CLIENT_NICK
            return CLIENT_NICK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __INVOKERCLIENTID_ISSET_ID = 1;
    private static final int __CHANNELID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.INVOKER_CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("invokerClientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_NICK, new org.apache.thrift.meta_data.FieldMetaData("clientNick", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelDeleted_args.class, metaDataMap);
    }

    public onChannelDeleted_args() {
    }

    public onChannelDeleted_args(
      int server_id,
      int invokerClientID,
      int channelID,
      String clientNick)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      this.channelID = channelID;
      setChannelIDIsSet(true);
      this.clientNick = clientNick;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelDeleted_args(onChannelDeleted_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.invokerClientID = other.invokerClientID;
      this.channelID = other.channelID;
      if (other.isSetClientNick()) {
        this.clientNick = other.clientNick;
      }
    }

    public onChannelDeleted_args deepCopy() {
      return new onChannelDeleted_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setInvokerClientIDIsSet(false);
      this.invokerClientID = 0;
      setChannelIDIsSet(false);
      this.channelID = 0;
      this.clientNick = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public onChannelDeleted_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getInvokerClientID() {
      return this.invokerClientID;
    }

    public onChannelDeleted_args setInvokerClientID(int invokerClientID) {
      this.invokerClientID = invokerClientID;
      setInvokerClientIDIsSet(true);
      return this;
    }

    public void unsetInvokerClientID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    /** Returns true if field invokerClientID is set (has been assigned a value) and false otherwise */
    public boolean isSetInvokerClientID() {
      return EncodingUtils.testBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID);
    }

    public void setInvokerClientIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVOKERCLIENTID_ISSET_ID, value);
    }

    public int getChannelID() {
      return this.channelID;
    }

    public onChannelDeleted_args setChannelID(int channelID) {
      this.channelID = channelID;
      setChannelIDIsSet(true);
      return this;
    }

    public void unsetChannelID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    /** Returns true if field channelID is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelID() {
      return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
    }

    public void setChannelIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
    }

    public String getClientNick() {
      return this.clientNick;
    }

    public onChannelDeleted_args setClientNick(String clientNick) {
      this.clientNick = clientNick;
      return this;
    }

    public void unsetClientNick() {
      this.clientNick = null;
    }

    /** Returns true if field clientNick is set (has been assigned a value) and false otherwise */
    public boolean isSetClientNick() {
      return this.clientNick != null;
    }

    public void setClientNickIsSet(boolean value) {
      if (!value) {
        this.clientNick = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case INVOKER_CLIENT_ID:
        if (value == null) {
          unsetInvokerClientID();
        } else {
          setInvokerClientID((Integer)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelID();
        } else {
          setChannelID((Integer)value);
        }
        break;

      case CLIENT_NICK:
        if (value == null) {
          unsetClientNick();
        } else {
          setClientNick((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case INVOKER_CLIENT_ID:
        return Integer.valueOf(getInvokerClientID());

      case CHANNEL_ID:
        return Integer.valueOf(getChannelID());

      case CLIENT_NICK:
        return getClientNick();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case INVOKER_CLIENT_ID:
        return isSetInvokerClientID();
      case CHANNEL_ID:
        return isSetChannelID();
      case CLIENT_NICK:
        return isSetClientNick();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelDeleted_args)
        return this.equals((onChannelDeleted_args)that);
      return false;
    }

    public boolean equals(onChannelDeleted_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_invokerClientID = true;
      boolean that_present_invokerClientID = true;
      if (this_present_invokerClientID || that_present_invokerClientID) {
        if (!(this_present_invokerClientID && that_present_invokerClientID))
          return false;
        if (this.invokerClientID != that.invokerClientID)
          return false;
      }

      boolean this_present_channelID = true;
      boolean that_present_channelID = true;
      if (this_present_channelID || that_present_channelID) {
        if (!(this_present_channelID && that_present_channelID))
          return false;
        if (this.channelID != that.channelID)
          return false;
      }

      boolean this_present_clientNick = true && this.isSetClientNick();
      boolean that_present_clientNick = true && that.isSetClientNick();
      if (this_present_clientNick || that_present_clientNick) {
        if (!(this_present_clientNick && that_present_clientNick))
          return false;
        if (!this.clientNick.equals(that.clientNick))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelDeleted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelDeleted_args typedOther = (onChannelDeleted_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvokerClientID()).compareTo(typedOther.isSetInvokerClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvokerClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokerClientID, typedOther.invokerClientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelID()).compareTo(typedOther.isSetChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelID, typedOther.channelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientNick()).compareTo(typedOther.isSetClientNick());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientNick()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNick, typedOther.clientNick);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelDeleted_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invokerClientID:");
      sb.append(this.invokerClientID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelID:");
      sb.append(this.channelID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientNick:");
      if (this.clientNick == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNick);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelDeleted_argsStandardSchemeFactory implements SchemeFactory {
      public onChannelDeleted_argsStandardScheme getScheme() {
        return new onChannelDeleted_argsStandardScheme();
      }
    }

    private static class onChannelDeleted_argsStandardScheme extends StandardScheme<onChannelDeleted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelDeleted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOKER_CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.invokerClientID = iprot.readI32();
                struct.setInvokerClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelID = iprot.readI32();
                struct.setChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_NICK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientNick = iprot.readString();
                struct.setClientNickIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelDeleted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INVOKER_CLIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.invokerClientID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI32(struct.channelID);
        oprot.writeFieldEnd();
        if (struct.clientNick != null) {
          oprot.writeFieldBegin(CLIENT_NICK_FIELD_DESC);
          oprot.writeString(struct.clientNick);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelDeleted_argsTupleSchemeFactory implements SchemeFactory {
      public onChannelDeleted_argsTupleScheme getScheme() {
        return new onChannelDeleted_argsTupleScheme();
      }
    }

    private static class onChannelDeleted_argsTupleScheme extends TupleScheme<onChannelDeleted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelDeleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetInvokerClientID()) {
          optionals.set(1);
        }
        if (struct.isSetChannelID()) {
          optionals.set(2);
        }
        if (struct.isSetClientNick()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetInvokerClientID()) {
          oprot.writeI32(struct.invokerClientID);
        }
        if (struct.isSetChannelID()) {
          oprot.writeI32(struct.channelID);
        }
        if (struct.isSetClientNick()) {
          oprot.writeString(struct.clientNick);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelDeleted_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invokerClientID = iprot.readI32();
          struct.setInvokerClientIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelID = iprot.readI32();
          struct.setChannelIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientNick = iprot.readString();
          struct.setClientNickIsSet(true);
        }
      }
    }

  }

  public static class onChannelDeleted_result implements org.apache.thrift.TBase<onChannelDeleted_result, onChannelDeleted_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onChannelDeleted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onChannelDeleted_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onChannelDeleted_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onChannelDeleted_result.class, metaDataMap);
    }

    public onChannelDeleted_result() {
    }

    public onChannelDeleted_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onChannelDeleted_result(onChannelDeleted_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public onChannelDeleted_result deepCopy() {
      return new onChannelDeleted_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public onChannelDeleted_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onChannelDeleted_result)
        return this.equals((onChannelDeleted_result)that);
      return false;
    }

    public boolean equals(onChannelDeleted_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(onChannelDeleted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      onChannelDeleted_result typedOther = (onChannelDeleted_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onChannelDeleted_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onChannelDeleted_resultStandardSchemeFactory implements SchemeFactory {
      public onChannelDeleted_resultStandardScheme getScheme() {
        return new onChannelDeleted_resultStandardScheme();
      }
    }

    private static class onChannelDeleted_resultStandardScheme extends StandardScheme<onChannelDeleted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onChannelDeleted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onChannelDeleted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onChannelDeleted_resultTupleSchemeFactory implements SchemeFactory {
      public onChannelDeleted_resultTupleScheme getScheme() {
        return new onChannelDeleted_resultTupleScheme();
      }
    }

    private static class onChannelDeleted_resultTupleScheme extends TupleScheme<onChannelDeleted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onChannelDeleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onChannelDeleted_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
