/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sn.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientVoiceToText {

  public interface Iface {

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.info_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException
    {
      send_info(server_id, max_clients, DNS, port_TS, port_Thrift);
      recv_info();
    }

    public void send_info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift) throws org.apache.thrift.TException
    {
      info_args args = new info_args();
      args.setServer_id(server_id);
      args.setMax_clients(max_clients);
      args.setDNS(DNS);
      args.setPort_TS(port_TS);
      args.setPort_Thrift(port_Thrift);
      sendBase("info", args);
    }

    public void recv_info() throws org.apache.thrift.TException
    {
      info_result result = new info_result();
      receiveBase(result, "info");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void info(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<info_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      info_call method_call = new info_call(server_id, max_clients, DNS, port_TS, port_Thrift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class info_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private int max_clients;
      private String DNS;
      private int port_TS;
      private int port_Thrift;
      public info_call(int server_id, int max_clients, String DNS, int port_TS, int port_Thrift, org.apache.thrift.async.AsyncMethodCallback<info_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.max_clients = max_clients;
        this.DNS = DNS;
        this.port_TS = port_TS;
        this.port_Thrift = port_Thrift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("info", org.apache.thrift.protocol.TMessageType.CALL, 0));
        info_args args = new info_args();
        args.setServer_id(server_id);
        args.setMax_clients(max_clients);
        args.setDNS(DNS);
        args.setPort_TS(port_TS);
        args.setPort_Thrift(port_Thrift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_info();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("info", new info());
      return processMap;
    }

    public static class info<I extends Iface> extends org.apache.thrift.ProcessFunction<I, info_args> {
      public info() {
        super("info");
      }

      public info_args getEmptyArgsInstance() {
        return new info_args();
      }

      public info_result getResult(I iface, info_args args) throws org.apache.thrift.TException {
        info_result result = new info_result();
        iface.info(args.server_id, args.max_clients, args.DNS, args.port_TS, args.port_Thrift);
        return result;
      }
    }

  }

  public static class info_args implements org.apache.thrift.TBase<info_args, info_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("info_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_CLIENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_clients", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DNS_FIELD_DESC = new org.apache.thrift.protocol.TField("DNS", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PORT__TS_FIELD_DESC = new org.apache.thrift.protocol.TField("port_TS", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PORT__THRIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("port_Thrift", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new info_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new info_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public int max_clients; // required
    public String DNS; // required
    public int port_TS; // required
    public int port_Thrift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      MAX_CLIENTS((short)2, "max_clients"),
      DNS((short)3, "DNS"),
      PORT__TS((short)4, "port_TS"),
      PORT__THRIFT((short)5, "port_Thrift");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // MAX_CLIENTS
            return MAX_CLIENTS;
          case 3: // DNS
            return DNS;
          case 4: // PORT__TS
            return PORT__TS;
          case 5: // PORT__THRIFT
            return PORT__THRIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private static final int __MAX_CLIENTS_ISSET_ID = 1;
    private static final int __PORT_TS_ISSET_ID = 2;
    private static final int __PORT_THRIFT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_CLIENTS, new org.apache.thrift.meta_data.FieldMetaData("max_clients", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DNS, new org.apache.thrift.meta_data.FieldMetaData("DNS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT__TS, new org.apache.thrift.meta_data.FieldMetaData("port_TS", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PORT__THRIFT, new org.apache.thrift.meta_data.FieldMetaData("port_Thrift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(info_args.class, metaDataMap);
    }

    public info_args() {
    }

    public info_args(
      int server_id,
      int max_clients,
      String DNS,
      int port_TS,
      int port_Thrift)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.max_clients = max_clients;
      setMax_clientsIsSet(true);
      this.DNS = DNS;
      this.port_TS = port_TS;
      setPort_TSIsSet(true);
      this.port_Thrift = port_Thrift;
      setPort_ThriftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public info_args(info_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      this.max_clients = other.max_clients;
      if (other.isSetDNS()) {
        this.DNS = other.DNS;
      }
      this.port_TS = other.port_TS;
      this.port_Thrift = other.port_Thrift;
    }

    public info_args deepCopy() {
      return new info_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      setMax_clientsIsSet(false);
      this.max_clients = 0;
      this.DNS = null;
      setPort_TSIsSet(false);
      this.port_TS = 0;
      setPort_ThriftIsSet(false);
      this.port_Thrift = 0;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public info_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public int getMax_clients() {
      return this.max_clients;
    }

    public info_args setMax_clients(int max_clients) {
      this.max_clients = max_clients;
      setMax_clientsIsSet(true);
      return this;
    }

    public void unsetMax_clients() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID);
    }

    /** Returns true if field max_clients is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_clients() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID);
    }

    public void setMax_clientsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_CLIENTS_ISSET_ID, value);
    }

    public String getDNS() {
      return this.DNS;
    }

    public info_args setDNS(String DNS) {
      this.DNS = DNS;
      return this;
    }

    public void unsetDNS() {
      this.DNS = null;
    }

    /** Returns true if field DNS is set (has been assigned a value) and false otherwise */
    public boolean isSetDNS() {
      return this.DNS != null;
    }

    public void setDNSIsSet(boolean value) {
      if (!value) {
        this.DNS = null;
      }
    }

    public int getPort_TS() {
      return this.port_TS;
    }

    public info_args setPort_TS(int port_TS) {
      this.port_TS = port_TS;
      setPort_TSIsSet(true);
      return this;
    }

    public void unsetPort_TS() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_TS_ISSET_ID);
    }

    /** Returns true if field port_TS is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_TS() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_TS_ISSET_ID);
    }

    public void setPort_TSIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_TS_ISSET_ID, value);
    }

    public int getPort_Thrift() {
      return this.port_Thrift;
    }

    public info_args setPort_Thrift(int port_Thrift) {
      this.port_Thrift = port_Thrift;
      setPort_ThriftIsSet(true);
      return this;
    }

    public void unsetPort_Thrift() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID);
    }

    /** Returns true if field port_Thrift is set (has been assigned a value) and false otherwise */
    public boolean isSetPort_Thrift() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID);
    }

    public void setPort_ThriftIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_THRIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case MAX_CLIENTS:
        if (value == null) {
          unsetMax_clients();
        } else {
          setMax_clients((Integer)value);
        }
        break;

      case DNS:
        if (value == null) {
          unsetDNS();
        } else {
          setDNS((String)value);
        }
        break;

      case PORT__TS:
        if (value == null) {
          unsetPort_TS();
        } else {
          setPort_TS((Integer)value);
        }
        break;

      case PORT__THRIFT:
        if (value == null) {
          unsetPort_Thrift();
        } else {
          setPort_Thrift((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case MAX_CLIENTS:
        return Integer.valueOf(getMax_clients());

      case DNS:
        return getDNS();

      case PORT__TS:
        return Integer.valueOf(getPort_TS());

      case PORT__THRIFT:
        return Integer.valueOf(getPort_Thrift());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case MAX_CLIENTS:
        return isSetMax_clients();
      case DNS:
        return isSetDNS();
      case PORT__TS:
        return isSetPort_TS();
      case PORT__THRIFT:
        return isSetPort_Thrift();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof info_args)
        return this.equals((info_args)that);
      return false;
    }

    public boolean equals(info_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_max_clients = true;
      boolean that_present_max_clients = true;
      if (this_present_max_clients || that_present_max_clients) {
        if (!(this_present_max_clients && that_present_max_clients))
          return false;
        if (this.max_clients != that.max_clients)
          return false;
      }

      boolean this_present_DNS = true && this.isSetDNS();
      boolean that_present_DNS = true && that.isSetDNS();
      if (this_present_DNS || that_present_DNS) {
        if (!(this_present_DNS && that_present_DNS))
          return false;
        if (!this.DNS.equals(that.DNS))
          return false;
      }

      boolean this_present_port_TS = true;
      boolean that_present_port_TS = true;
      if (this_present_port_TS || that_present_port_TS) {
        if (!(this_present_port_TS && that_present_port_TS))
          return false;
        if (this.port_TS != that.port_TS)
          return false;
      }

      boolean this_present_port_Thrift = true;
      boolean that_present_port_Thrift = true;
      if (this_present_port_Thrift || that_present_port_Thrift) {
        if (!(this_present_port_Thrift && that_present_port_Thrift))
          return false;
        if (this.port_Thrift != that.port_Thrift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(info_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      info_args typedOther = (info_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_clients()).compareTo(typedOther.isSetMax_clients());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_clients()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_clients, typedOther.max_clients);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDNS()).compareTo(typedOther.isSetDNS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDNS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DNS, typedOther.DNS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_TS()).compareTo(typedOther.isSetPort_TS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_TS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_TS, typedOther.port_TS);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort_Thrift()).compareTo(typedOther.isSetPort_Thrift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort_Thrift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port_Thrift, typedOther.port_Thrift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("info_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_clients:");
      sb.append(this.max_clients);
      first = false;
      if (!first) sb.append(", ");
      sb.append("DNS:");
      if (this.DNS == null) {
        sb.append("null");
      } else {
        sb.append(this.DNS);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_TS:");
      sb.append(this.port_TS);
      first = false;
      if (!first) sb.append(", ");
      sb.append("port_Thrift:");
      sb.append(this.port_Thrift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class info_argsStandardSchemeFactory implements SchemeFactory {
      public info_argsStandardScheme getScheme() {
        return new info_argsStandardScheme();
      }
    }

    private static class info_argsStandardScheme extends StandardScheme<info_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, info_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX_CLIENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.max_clients = iprot.readI32();
                struct.setMax_clientsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DNS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.DNS = iprot.readString();
                struct.setDNSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PORT__TS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_TS = iprot.readI32();
                struct.setPort_TSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT__THRIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port_Thrift = iprot.readI32();
                struct.setPort_ThriftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, info_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_CLIENTS_FIELD_DESC);
        oprot.writeI32(struct.max_clients);
        oprot.writeFieldEnd();
        if (struct.DNS != null) {
          oprot.writeFieldBegin(DNS_FIELD_DESC);
          oprot.writeString(struct.DNS);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT__TS_FIELD_DESC);
        oprot.writeI32(struct.port_TS);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PORT__THRIFT_FIELD_DESC);
        oprot.writeI32(struct.port_Thrift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class info_argsTupleSchemeFactory implements SchemeFactory {
      public info_argsTupleScheme getScheme() {
        return new info_argsTupleScheme();
      }
    }

    private static class info_argsTupleScheme extends TupleScheme<info_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetMax_clients()) {
          optionals.set(1);
        }
        if (struct.isSetDNS()) {
          optionals.set(2);
        }
        if (struct.isSetPort_TS()) {
          optionals.set(3);
        }
        if (struct.isSetPort_Thrift()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetMax_clients()) {
          oprot.writeI32(struct.max_clients);
        }
        if (struct.isSetDNS()) {
          oprot.writeString(struct.DNS);
        }
        if (struct.isSetPort_TS()) {
          oprot.writeI32(struct.port_TS);
        }
        if (struct.isSetPort_Thrift()) {
          oprot.writeI32(struct.port_Thrift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, info_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.max_clients = iprot.readI32();
          struct.setMax_clientsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.DNS = iprot.readString();
          struct.setDNSIsSet(true);
        }
        if (incoming.get(3)) {
          struct.port_TS = iprot.readI32();
          struct.setPort_TSIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port_Thrift = iprot.readI32();
          struct.setPort_ThriftIsSet(true);
        }
      }
    }

  }

  public static class info_result implements org.apache.thrift.TBase<info_result, info_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("info_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new info_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new info_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(info_result.class, metaDataMap);
    }

    public info_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public info_result(info_result other) {
    }

    public info_result deepCopy() {
      return new info_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof info_result)
        return this.equals((info_result)that);
      return false;
    }

    public boolean equals(info_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(info_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      info_result typedOther = (info_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("info_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class info_resultStandardSchemeFactory implements SchemeFactory {
      public info_resultStandardScheme getScheme() {
        return new info_resultStandardScheme();
      }
    }

    private static class info_resultStandardScheme extends StandardScheme<info_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, info_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, info_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class info_resultTupleSchemeFactory implements SchemeFactory {
      public info_resultTupleScheme getScheme() {
        return new info_resultTupleScheme();
      }
    }

    private static class info_resultTupleScheme extends TupleScheme<info_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, info_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
