/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sn.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientTextToVoice {

  public interface Iface {

    public int channelCreate(int server_id, String nome, String password) throws org.apache.thrift.TException;

    public boolean channelDelete(int server_id, String nome) throws org.apache.thrift.TException;

    public boolean disconnectClient(int server_id, String clientID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void channelCreate(int server_id, String nome, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.channelCreate_call> resultHandler) throws org.apache.thrift.TException;

    public void channelDelete(int server_id, String nome, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.channelDelete_call> resultHandler) throws org.apache.thrift.TException;

    public void disconnectClient(int server_id, String clientID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.disconnectClient_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int channelCreate(int server_id, String nome, String password) throws org.apache.thrift.TException
    {
      send_channelCreate(server_id, nome, password);
      return recv_channelCreate();
    }

    public void send_channelCreate(int server_id, String nome, String password) throws org.apache.thrift.TException
    {
      channelCreate_args args = new channelCreate_args();
      args.setServer_id(server_id);
      args.setNome(nome);
      args.setPassword(password);
      sendBase("channelCreate", args);
    }

    public int recv_channelCreate() throws org.apache.thrift.TException
    {
      channelCreate_result result = new channelCreate_result();
      receiveBase(result, "channelCreate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "channelCreate failed: unknown result");
    }

    public boolean channelDelete(int server_id, String nome) throws org.apache.thrift.TException
    {
      send_channelDelete(server_id, nome);
      return recv_channelDelete();
    }

    public void send_channelDelete(int server_id, String nome) throws org.apache.thrift.TException
    {
      channelDelete_args args = new channelDelete_args();
      args.setServer_id(server_id);
      args.setNome(nome);
      sendBase("channelDelete", args);
    }

    public boolean recv_channelDelete() throws org.apache.thrift.TException
    {
      channelDelete_result result = new channelDelete_result();
      receiveBase(result, "channelDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "channelDelete failed: unknown result");
    }

    public boolean disconnectClient(int server_id, String clientID) throws org.apache.thrift.TException
    {
      send_disconnectClient(server_id, clientID);
      return recv_disconnectClient();
    }

    public void send_disconnectClient(int server_id, String clientID) throws org.apache.thrift.TException
    {
      disconnectClient_args args = new disconnectClient_args();
      args.setServer_id(server_id);
      args.setClientID(clientID);
      sendBase("disconnectClient", args);
    }

    public boolean recv_disconnectClient() throws org.apache.thrift.TException
    {
      disconnectClient_result result = new disconnectClient_result();
      receiveBase(result, "disconnectClient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disconnectClient failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void channelCreate(int server_id, String nome, String password, org.apache.thrift.async.AsyncMethodCallback<channelCreate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      channelCreate_call method_call = new channelCreate_call(server_id, nome, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class channelCreate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private String nome;
      private String password;
      public channelCreate_call(int server_id, String nome, String password, org.apache.thrift.async.AsyncMethodCallback<channelCreate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.nome = nome;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("channelCreate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        channelCreate_args args = new channelCreate_args();
        args.setServer_id(server_id);
        args.setNome(nome);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_channelCreate();
      }
    }

    public void channelDelete(int server_id, String nome, org.apache.thrift.async.AsyncMethodCallback<channelDelete_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      channelDelete_call method_call = new channelDelete_call(server_id, nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class channelDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private String nome;
      public channelDelete_call(int server_id, String nome, org.apache.thrift.async.AsyncMethodCallback<channelDelete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("channelDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        channelDelete_args args = new channelDelete_args();
        args.setServer_id(server_id);
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_channelDelete();
      }
    }

    public void disconnectClient(int server_id, String clientID, org.apache.thrift.async.AsyncMethodCallback<disconnectClient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disconnectClient_call method_call = new disconnectClient_call(server_id, clientID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disconnectClient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int server_id;
      private String clientID;
      public disconnectClient_call(int server_id, String clientID, org.apache.thrift.async.AsyncMethodCallback<disconnectClient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server_id = server_id;
        this.clientID = clientID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disconnectClient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disconnectClient_args args = new disconnectClient_args();
        args.setServer_id(server_id);
        args.setClientID(clientID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disconnectClient();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("channelCreate", new channelCreate());
      processMap.put("channelDelete", new channelDelete());
      processMap.put("disconnectClient", new disconnectClient());
      return processMap;
    }

    public static class channelCreate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, channelCreate_args> {
      public channelCreate() {
        super("channelCreate");
      }

      public channelCreate_args getEmptyArgsInstance() {
        return new channelCreate_args();
      }

      public channelCreate_result getResult(I iface, channelCreate_args args) throws org.apache.thrift.TException {
        channelCreate_result result = new channelCreate_result();
        result.success = iface.channelCreate(args.server_id, args.nome, args.password);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class channelDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, channelDelete_args> {
      public channelDelete() {
        super("channelDelete");
      }

      public channelDelete_args getEmptyArgsInstance() {
        return new channelDelete_args();
      }

      public channelDelete_result getResult(I iface, channelDelete_args args) throws org.apache.thrift.TException {
        channelDelete_result result = new channelDelete_result();
        result.success = iface.channelDelete(args.server_id, args.nome);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class disconnectClient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disconnectClient_args> {
      public disconnectClient() {
        super("disconnectClient");
      }

      public disconnectClient_args getEmptyArgsInstance() {
        return new disconnectClient_args();
      }

      public disconnectClient_result getResult(I iface, disconnectClient_args args) throws org.apache.thrift.TException {
        disconnectClient_result result = new disconnectClient_result();
        result.success = iface.disconnectClient(args.server_id, args.clientID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class channelCreate_args implements org.apache.thrift.TBase<channelCreate_args, channelCreate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("channelCreate_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new channelCreate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new channelCreate_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public String nome; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      NOME((short)2, "nome"),
      PASSWORD((short)3, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // NOME
            return NOME;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(channelCreate_args.class, metaDataMap);
    }

    public channelCreate_args() {
    }

    public channelCreate_args(
      int server_id,
      String nome,
      String password)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.nome = nome;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public channelCreate_args(channelCreate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      if (other.isSetNome()) {
        this.nome = other.nome;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public channelCreate_args deepCopy() {
      return new channelCreate_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      this.nome = null;
      this.password = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public channelCreate_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public String getNome() {
      return this.nome;
    }

    public channelCreate_args setNome(String nome) {
      this.nome = nome;
      return this;
    }

    public void unsetNome() {
      this.nome = null;
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return this.nome != null;
    }

    public void setNomeIsSet(boolean value) {
      if (!value) {
        this.nome = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public channelCreate_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case NOME:
        return getNome();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case NOME:
        return isSetNome();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof channelCreate_args)
        return this.equals((channelCreate_args)that);
      return false;
    }

    public boolean equals(channelCreate_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_nome = true && this.isSetNome();
      boolean that_present_nome = true && that.isSetNome();
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (!this.nome.equals(that.nome))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(channelCreate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      channelCreate_args typedOther = (channelCreate_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNome()).compareTo(typedOther.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, typedOther.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("channelCreate_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nome:");
      if (this.nome == null) {
        sb.append("null");
      } else {
        sb.append(this.nome);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class channelCreate_argsStandardSchemeFactory implements SchemeFactory {
      public channelCreate_argsStandardScheme getScheme() {
        return new channelCreate_argsStandardScheme();
      }
    }

    private static class channelCreate_argsStandardScheme extends StandardScheme<channelCreate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, channelCreate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nome = iprot.readString();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, channelCreate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        if (struct.nome != null) {
          oprot.writeFieldBegin(NOME_FIELD_DESC);
          oprot.writeString(struct.nome);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class channelCreate_argsTupleSchemeFactory implements SchemeFactory {
      public channelCreate_argsTupleScheme getScheme() {
        return new channelCreate_argsTupleScheme();
      }
    }

    private static class channelCreate_argsTupleScheme extends TupleScheme<channelCreate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, channelCreate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetNome()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetNome()) {
          oprot.writeString(struct.nome);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, channelCreate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nome = iprot.readString();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class channelCreate_result implements org.apache.thrift.TBase<channelCreate_result, channelCreate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("channelCreate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new channelCreate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new channelCreate_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(channelCreate_result.class, metaDataMap);
    }

    public channelCreate_result() {
    }

    public channelCreate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public channelCreate_result(channelCreate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public channelCreate_result deepCopy() {
      return new channelCreate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public channelCreate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof channelCreate_result)
        return this.equals((channelCreate_result)that);
      return false;
    }

    public boolean equals(channelCreate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(channelCreate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      channelCreate_result typedOther = (channelCreate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("channelCreate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class channelCreate_resultStandardSchemeFactory implements SchemeFactory {
      public channelCreate_resultStandardScheme getScheme() {
        return new channelCreate_resultStandardScheme();
      }
    }

    private static class channelCreate_resultStandardScheme extends StandardScheme<channelCreate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, channelCreate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, channelCreate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class channelCreate_resultTupleSchemeFactory implements SchemeFactory {
      public channelCreate_resultTupleScheme getScheme() {
        return new channelCreate_resultTupleScheme();
      }
    }

    private static class channelCreate_resultTupleScheme extends TupleScheme<channelCreate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, channelCreate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, channelCreate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class channelDelete_args implements org.apache.thrift.TBase<channelDelete_args, channelDelete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("channelDelete_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new channelDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new channelDelete_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public String nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      NOME((short)2, "nome");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(channelDelete_args.class, metaDataMap);
    }

    public channelDelete_args() {
    }

    public channelDelete_args(
      int server_id,
      String nome)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.nome = nome;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public channelDelete_args(channelDelete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      if (other.isSetNome()) {
        this.nome = other.nome;
      }
    }

    public channelDelete_args deepCopy() {
      return new channelDelete_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      this.nome = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public channelDelete_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public String getNome() {
      return this.nome;
    }

    public channelDelete_args setNome(String nome) {
      this.nome = nome;
      return this;
    }

    public void unsetNome() {
      this.nome = null;
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return this.nome != null;
    }

    public void setNomeIsSet(boolean value) {
      if (!value) {
        this.nome = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case NOME:
        return getNome();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case NOME:
        return isSetNome();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof channelDelete_args)
        return this.equals((channelDelete_args)that);
      return false;
    }

    public boolean equals(channelDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_nome = true && this.isSetNome();
      boolean that_present_nome = true && that.isSetNome();
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (!this.nome.equals(that.nome))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(channelDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      channelDelete_args typedOther = (channelDelete_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNome()).compareTo(typedOther.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, typedOther.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("channelDelete_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nome:");
      if (this.nome == null) {
        sb.append("null");
      } else {
        sb.append(this.nome);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class channelDelete_argsStandardSchemeFactory implements SchemeFactory {
      public channelDelete_argsStandardScheme getScheme() {
        return new channelDelete_argsStandardScheme();
      }
    }

    private static class channelDelete_argsStandardScheme extends StandardScheme<channelDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, channelDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nome = iprot.readString();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, channelDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        if (struct.nome != null) {
          oprot.writeFieldBegin(NOME_FIELD_DESC);
          oprot.writeString(struct.nome);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class channelDelete_argsTupleSchemeFactory implements SchemeFactory {
      public channelDelete_argsTupleScheme getScheme() {
        return new channelDelete_argsTupleScheme();
      }
    }

    private static class channelDelete_argsTupleScheme extends TupleScheme<channelDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, channelDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetNome()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetNome()) {
          oprot.writeString(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, channelDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nome = iprot.readString();
          struct.setNomeIsSet(true);
        }
      }
    }

  }

  public static class channelDelete_result implements org.apache.thrift.TBase<channelDelete_result, channelDelete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("channelDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new channelDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new channelDelete_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(channelDelete_result.class, metaDataMap);
    }

    public channelDelete_result() {
    }

    public channelDelete_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public channelDelete_result(channelDelete_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public channelDelete_result deepCopy() {
      return new channelDelete_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public channelDelete_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof channelDelete_result)
        return this.equals((channelDelete_result)that);
      return false;
    }

    public boolean equals(channelDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(channelDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      channelDelete_result typedOther = (channelDelete_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("channelDelete_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class channelDelete_resultStandardSchemeFactory implements SchemeFactory {
      public channelDelete_resultStandardScheme getScheme() {
        return new channelDelete_resultStandardScheme();
      }
    }

    private static class channelDelete_resultStandardScheme extends StandardScheme<channelDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, channelDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, channelDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class channelDelete_resultTupleSchemeFactory implements SchemeFactory {
      public channelDelete_resultTupleScheme getScheme() {
        return new channelDelete_resultTupleScheme();
      }
    }

    private static class channelDelete_resultTupleScheme extends TupleScheme<channelDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, channelDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, channelDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disconnectClient_args implements org.apache.thrift.TBase<disconnectClient_args, disconnectClient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectClient_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("server_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnectClient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnectClient_argsTupleSchemeFactory());
    }

    public int server_id; // required
    public String clientID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "server_id"),
      CLIENT_ID((short)2, "clientID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVER_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("server_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectClient_args.class, metaDataMap);
    }

    public disconnectClient_args() {
    }

    public disconnectClient_args(
      int server_id,
      String clientID)
    {
      this();
      this.server_id = server_id;
      setServer_idIsSet(true);
      this.clientID = clientID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectClient_args(disconnectClient_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.server_id = other.server_id;
      if (other.isSetClientID()) {
        this.clientID = other.clientID;
      }
    }

    public disconnectClient_args deepCopy() {
      return new disconnectClient_args(this);
    }

    @Override
    public void clear() {
      setServer_idIsSet(false);
      this.server_id = 0;
      this.clientID = null;
    }

    public int getServer_id() {
      return this.server_id;
    }

    public disconnectClient_args setServer_id(int server_id) {
      this.server_id = server_id;
      setServer_idIsSet(true);
      return this;
    }

    public void unsetServer_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    /** Returns true if field server_id is set (has been assigned a value) and false otherwise */
    public boolean isSetServer_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVER_ID_ISSET_ID);
    }

    public void setServer_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVER_ID_ISSET_ID, value);
    }

    public String getClientID() {
      return this.clientID;
    }

    public disconnectClient_args setClientID(String clientID) {
      this.clientID = clientID;
      return this;
    }

    public void unsetClientID() {
      this.clientID = null;
    }

    /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
    public boolean isSetClientID() {
      return this.clientID != null;
    }

    public void setClientIDIsSet(boolean value) {
      if (!value) {
        this.clientID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServer_id();
        } else {
          setServer_id((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientID();
        } else {
          setClientID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Integer.valueOf(getServer_id());

      case CLIENT_ID:
        return getClientID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServer_id();
      case CLIENT_ID:
        return isSetClientID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectClient_args)
        return this.equals((disconnectClient_args)that);
      return false;
    }

    public boolean equals(disconnectClient_args that) {
      if (that == null)
        return false;

      boolean this_present_server_id = true;
      boolean that_present_server_id = true;
      if (this_present_server_id || that_present_server_id) {
        if (!(this_present_server_id && that_present_server_id))
          return false;
        if (this.server_id != that.server_id)
          return false;
      }

      boolean this_present_clientID = true && this.isSetClientID();
      boolean that_present_clientID = true && that.isSetClientID();
      if (this_present_clientID || that_present_clientID) {
        if (!(this_present_clientID && that_present_clientID))
          return false;
        if (!this.clientID.equals(that.clientID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(disconnectClient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      disconnectClient_args typedOther = (disconnectClient_args)other;

      lastComparison = Boolean.valueOf(isSetServer_id()).compareTo(typedOther.isSetServer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_id, typedOther.server_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientID()).compareTo(typedOther.isSetClientID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, typedOther.clientID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnectClient_args(");
      boolean first = true;

      sb.append("server_id:");
      sb.append(this.server_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientID:");
      if (this.clientID == null) {
        sb.append("null");
      } else {
        sb.append(this.clientID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectClient_argsStandardSchemeFactory implements SchemeFactory {
      public disconnectClient_argsStandardScheme getScheme() {
        return new disconnectClient_argsStandardScheme();
      }
    }

    private static class disconnectClient_argsStandardScheme extends StandardScheme<disconnectClient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.server_id = iprot.readI32();
                struct.setServer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientID = iprot.readString();
                struct.setClientIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectClient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI32(struct.server_id);
        oprot.writeFieldEnd();
        if (struct.clientID != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectClient_argsTupleSchemeFactory implements SchemeFactory {
      public disconnectClient_argsTupleScheme getScheme() {
        return new disconnectClient_argsTupleScheme();
      }
    }

    private static class disconnectClient_argsTupleScheme extends TupleScheme<disconnectClient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectClient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer_id()) {
          optionals.set(0);
        }
        if (struct.isSetClientID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServer_id()) {
          oprot.writeI32(struct.server_id);
        }
        if (struct.isSetClientID()) {
          oprot.writeString(struct.clientID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectClient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.server_id = iprot.readI32();
          struct.setServer_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientID = iprot.readString();
          struct.setClientIDIsSet(true);
        }
      }
    }

  }

  public static class disconnectClient_result implements org.apache.thrift.TBase<disconnectClient_result, disconnectClient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disconnectClient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disconnectClient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disconnectClient_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disconnectClient_result.class, metaDataMap);
    }

    public disconnectClient_result() {
    }

    public disconnectClient_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disconnectClient_result(disconnectClient_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public disconnectClient_result deepCopy() {
      return new disconnectClient_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public disconnectClient_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disconnectClient_result)
        return this.equals((disconnectClient_result)that);
      return false;
    }

    public boolean equals(disconnectClient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(disconnectClient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      disconnectClient_result typedOther = (disconnectClient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disconnectClient_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disconnectClient_resultStandardSchemeFactory implements SchemeFactory {
      public disconnectClient_resultStandardScheme getScheme() {
        return new disconnectClient_resultStandardScheme();
      }
    }

    private static class disconnectClient_resultStandardScheme extends StandardScheme<disconnectClient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disconnectClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disconnectClient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disconnectClient_resultTupleSchemeFactory implements SchemeFactory {
      public disconnectClient_resultTupleScheme getScheme() {
        return new disconnectClient_resultTupleScheme();
      }
    }

    private static class disconnectClient_resultTupleScheme extends TupleScheme<disconnectClient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disconnectClient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disconnectClient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
